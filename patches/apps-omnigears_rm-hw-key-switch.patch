diff --git a/res/values-de/custom_strings.xml b/res/values-de/custom_strings.xml
index dea9abc..c4fa04b 100644
--- a/res/values-de/custom_strings.xml
+++ b/res/values-de/custom_strings.xml
@@ -141,6 +141,6 @@
   <string name="unit_sec">sek</string>
   <string name="navigation_bar_show_title">Navigationsleiste einblenden</string>
   <string name="navigation_bar_show_summary">Navigationsleiste immer anzeigen</string>
-  <string name="hardware_keys_disable_title">Tasten deaktivieren</string>
-  <string name="hardware_keys_disable_summary">Hardwaretasten deaktivieren erzwingen</string>
+  <!--string name="hardware_keys_disable_title">Tasten deaktivieren</string-->
+  <!--string name="hardware_keys_disable_summary">Hardwaretasten deaktivieren erzwingen</string-->
 </resources>
diff --git a/res/values/custom_strings.xml b/res/values/custom_strings.xml
index 88282d3..562d38d 100644
--- a/res/values/custom_strings.xml
+++ b/res/values/custom_strings.xml
@@ -167,8 +167,8 @@
 
     <string name="navigation_bar_show_title">Show navigation bar</string>
     <string name="navigation_bar_show_summary">Force enable navigation bar</string>
-    <string name="hardware_keys_disable_title">Disable keys</string>
-    <string name="hardware_keys_disable_summary">Force disable hardware keys</string>
+    <!--string name="hardware_keys_disable_title">Disable keys</string-->
+    <!--string name="hardware_keys_disable_summary">Force disable hardware keys</string-->
 
     <string name="navbar_title">Navigation bar</string>
     <string name="navbar_recents_style_title">Recents style</string>
diff --git a/res/xml/button_settings.xml b/res/xml/button_settings.xml
index c714715..333f48a 100644
--- a/res/xml/button_settings.xml
+++ b/res/xml/button_settings.xml
@@ -81,11 +81,11 @@
             android:summary="@string/navigation_bar_show_summary"
             android:persistent="false" />
 
-        <SwitchPreference
+        <!--SwitchPreference
             android:key="hardware_keys_disable"
             android:title="@string/hardware_keys_disable_title"
             android:summary="@string/hardware_keys_disable_summary"
-            android:persistent="false"/>
+            android:persistent="false"/-->
 
         <!--<CheckBoxPreference
             android:key="virtual_key_haptic_feedback"
diff --git a/src/org/omnirom/omnigears/ButtonSettings.java b/src/org/omnirom/omnigears/ButtonSettings.java
index 491986e..a443051 100644
--- a/src/org/omnirom/omnigears/ButtonSettings.java
+++ b/src/org/omnirom/omnigears/ButtonSettings.java
@@ -105,7 +105,7 @@ public class ButtonSettings extends SettingsPreferenceFragment implements OnPref
 //    private static final String FORCE_SHOW_OVERFLOW_MENU = "force_show_overflow_menu";
     private static final String KEYS_BRIGHTNESS_KEY = "button_brightness";
     private static final String KEYS_SHOW_NAVBAR_KEY = "navigation_bar_show";
-    private static final String KEYS_DISABLE_HW_KEY = "hardware_keys_disable";
+//    private static final String KEYS_DISABLE_HW_KEY = "hardware_keys_disable";
 
     // Available custom actions to perform on a key press.
     private static final int ACTION_NOTHING = 0;
@@ -277,8 +277,8 @@ public class ButtonSettings extends SettingsPreferenceFragment implements OnPref
 //                    FORCE_SHOW_OVERFLOW_MENU);
             mEnableNavBar = (SwitchPreference) prefScreen.findPreference(
                     KEYS_SHOW_NAVBAR_KEY);
-            mDisabkeHWKeys = (SwitchPreference) prefScreen.findPreference(
-                    KEYS_DISABLE_HW_KEY);
+//            mDisabkeHWKeys = (SwitchPreference) prefScreen.findPreference(
+//                    KEYS_DISABLE_HW_KEY);
             mButtonBrightness = (PreferenceScreen) prefScreen.findPreference(
                     KEYS_BRIGHTNESS_KEY);
 
@@ -461,14 +461,14 @@ public class ButtonSettings extends SettingsPreferenceFragment implements OnPref
                         Settings.System.NAVIGATION_BAR_SHOW, showNavBarDefault ? 1:0) == 1;
             mEnableNavBar.setChecked(showNavBar);
 
-            boolean harwareKeysDisable = Settings.System.getInt(resolver,
-                        Settings.System.HARDWARE_KEYS_DISABLE, 0) == 1;
-            mDisabkeHWKeys.setChecked(harwareKeysDisable);
+//            boolean harwareKeysDisable = Settings.System.getInt(resolver,
+//                        Settings.System.HARDWARE_KEYS_DISABLE, 0) == 1;
+//            mDisabkeHWKeys.setChecked(harwareKeysDisable);
 
             if (!mButtonBrightnessSupport) {
                 keysCategory.removePreference(mButtonBrightness);
             }
-            updateDisableHWKeyEnablement(harwareKeysDisable);
+//            updateDisableHWKeyEnablement(harwareKeysDisable);
         }
 
 //        final PreferenceCategory headsethookCategory =
@@ -512,12 +512,12 @@ public class ButtonSettings extends SettingsPreferenceFragment implements OnPref
             Settings.System.putInt(getContentResolver(),
                     Settings.System.NAVIGATION_BAR_SHOW, checked ? 1:0);
             return true;
-        } else if (preference == mDisabkeHWKeys) {
-            boolean checked = ((SwitchPreference)preference).isChecked();
-            Settings.System.putInt(getContentResolver(),
-                    Settings.System.HARDWARE_KEYS_DISABLE, checked ? 1:0);
-            updateDisableHWKeyEnablement(checked);
-            return true;
+//        } else if (preference == mDisabkeHWKeys) {
+//            boolean checked = ((SwitchPreference)preference).isChecked();
+//            Settings.System.putInt(getContentResolver(),
+//                    Settings.System.HARDWARE_KEYS_DISABLE, checked ? 1:0);
+//            updateDisableHWKeyEnablement(checked);
+//            return true;
         } else if (preference == mSwapVolumeButtons) {
             boolean checked = ((CheckBoxPreference)preference).isChecked();
             Settings.System.putInt(getContentResolver(),
@@ -543,9 +543,9 @@ public class ButtonSettings extends SettingsPreferenceFragment implements OnPref
             boolean value = (Boolean) newValue;
             Settings.System.putInt(getContentResolver(), Settings.System.HARDWARE_KEY_REBINDING,
                     value ? 1 : 0);
-            boolean harwareKeysDisable = Settings.System.getInt(getContentResolver(),
-                    Settings.System.HARDWARE_KEYS_DISABLE, 0) == 1;
-            updateDisableHWKeyEnablement(harwareKeysDisable);
+//            boolean harwareKeysDisable = Settings.System.getInt(getContentResolver(),
+//                    Settings.System.HARDWARE_KEYS_DISABLE, 0) == 1;
+//            updateDisableHWKeyEnablement(harwareKeysDisable);
             return true;
 //        } else if (preference == mVolumeKeyCursorControl) {
 //            String volumeKeyCursorControl = (String) newValue;
@@ -753,20 +753,20 @@ public class ButtonSettings extends SettingsPreferenceFragment implements OnPref
 //        list.setEntryValues(values.toArray(new CharSequence[values.size()]));
 //    }
 
-    private void updateDisableHWKeyEnablement(boolean harwareKeysDisable) {
-        boolean enableHWKeyRebinding = Settings.System.getInt(getContentResolver(),
-                    Settings.System.HARDWARE_KEY_REBINDING, 0) == 1;
-
+//    private void updateDisableHWKeyEnablement(boolean harwareKeysDisable) {
+//        boolean enableHWKeyRebinding = Settings.System.getInt(getContentResolver(),
+//                    Settings.System.HARDWARE_KEY_REBINDING, 0) == 1;
+//
 //        mVirtualKeyHapticFeedback.setEnabled(!harwareKeysDisable);
 //        mForceShowOverflowMenu.setEnabled(!harwareKeysDisable);
-        mEnableCustomBindings.setEnabled(!harwareKeysDisable);
-        mButtonBrightness.setEnabled(!harwareKeysDisable);
-        mKeysHomeCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
-        mKeysBackCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
-        mKeysMenuCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
-        mKeysAppSwitchCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
-        mKeysAssistCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
-    }
+//        mEnableCustomBindings.setEnabled(!harwareKeysDisable);
+//        mButtonBrightness.setEnabled(!harwareKeysDisable);
+//        mKeysHomeCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
+//        mKeysBackCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
+//        mKeysMenuCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
+//        mKeysAppSwitchCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
+//        mKeysAssistCategory.setEnabled(!harwareKeysDisable && enableHWKeyRebinding);
+//    }
 
     private void doOmniSwitchConfig() {
         AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getActivity());
